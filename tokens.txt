ABSTRACT:           'abstract';
BOOLEAN:            'boolean';
BREAK:              'break';
CASE:               'case';
CATCH:              'catch';
CHAR:               'char';
CLASS:              'class';
CONTINUE:           'continue';
DO:                 'do';
DOUBLE:             'double';
ELSE:               'else';
ENUM:               'enum';
EXTENDS:            'extends';
FINAL:              'final';
FLOAT:              'float';
FOR:                'for';
IF:                 'if';
IMPLEMENTS:         'implements';
IMPORT:             'import';
INT:                'int';
INTERFACE:          'interface';
LONG:               'long';
NEW:                'new';
PACKAGE:            'package';
PRIVATE:            'private';
PROTECTED:          'protected';
PUBLIC:             'public';
RETURN:             'return';
SHORT:              'short';
SUPER:              'super';
SWITCH:             'switch';
THIS:               'this';
THROW:              'throw';
TRY:                'try';
VOID:               'void';
WHILE:              'while';


DECIMAL_LITERAL:    ('0' | [1-9] (Digits?));

FLOAT_LITERAL:      (Digits '.' Digits? | '.' Digits)?
             ;

BOOL_LITERAL:       'true'
            |       'false'
            ;

CHAR_LITERAL:       '\'' (~['\\\r\n] | EscapeSequence) '\'';

STRING_LITERAL:     '"' (~["\\\r\n] | EscapeSequence)* '"';
NULL_LITERAL:       'null';
// Separators
LPAREN:             '(';
RPAREN:             ')';
LBRACE:             '{';
RBRACE:             '}';
LBRACK:             '[';
RBRACK:             ']';
SEMI:               ';';
COMMA:              ',';
DOT:                '.';
// Operators
ASSIGN:             '=';
GT:                 '>';
LT:                 '<';
BANG:               '!';
TILDE:              '~';
QUESTION:           '?';
COLON:              ':';
EQUAL:              '==';
LE:                 '<=';
GE:                 '>=';
NOTEQUAL:           '!=';
AND:                'and';
OR:                 'or';
ADD:                '+';
SUB:                '-';
MUL:                '*';
DIV:                '/';
BITAND:             '&';
BITOR:              '|';
CARET:              '^';
MOD:                '%';
ELLIPSIS:           '...';
WS:                 [ \t\r\n]+ -> channel(HIDDEN);
COMMENT:            '/*' .*? '*/'    -> channel(HIDDEN);
LINE_COMMENT:       '//' ~[\r\n]*    -> channel(HIDDEN);

// Identifiers

IDENTIFIER:         Letter LetterOrDigit*;


fragment EscapeSequence
    : '\\' [btnfr"'\\]
    ;
fragment Digits
    : [0-9] ([0-9_]* [0-9])?
    ;
fragment LetterOrDigit
    : Letter
    | [0-9]
    ;
fragment Letter
    : [a-zA-z]
    ;